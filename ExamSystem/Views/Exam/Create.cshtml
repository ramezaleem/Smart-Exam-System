@model ExamSystem.Models.Exam

@{
    ViewData["Title"] = "إضافة امتحان جديد";
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />

<h2>@ViewData["Title"]</h2>

<form asp-controller="Exam" asp-action="Create" method="post" class="mt-3" id="examForm">
    @Html.AntiForgeryToken()

    <div class="form-group mb-3">
        <label asp-for="Title" class="form-label"></label>
        <input asp-for="Title" class="form-control" />
        <span asp-validation-for="Title" class="text-danger"></span>
    </div>

    <div class="form-group mb-3">
        <label asp-for="StartTime" class="form-label"></label>
        <input asp-for="StartTime" class="form-control" type="datetime-local" id="startTime" />
        <span asp-validation-for="StartTime" class="text-danger"></span>
    </div>

    <div class="form-group mb-3">
        <label asp-for="EndTime" class="form-label"></label>
        <input asp-for="EndTime" class="form-control" type="datetime-local" id="endTime" />
        <span asp-validation-for="EndTime" class="text-danger"></span>
    </div>

    <div class="form-group mb-3">
        <label asp-for="Description" class="form-label"></label>
        <textarea asp-for="Description" class="form-control"></textarea>
        <span asp-validation-for="Description" class="text-danger"></span>
    </div>

    <!-- رسالة الخطأ الخاصة بالتحقق من الوقت -->
    <div class="alert alert-danger d-none" role="alert" id="timeErrorMsg" style="font-weight: 600; font-size: 1.1rem;">
        الرجاء إدخال وقت البداية ووقت النهاية. ووقت الانتهاء يجب أن يكون أكبر من أو يساوي وقت البداية!
    </div>

    <button type="submit" class="btn btn-success">💾 حفظ</button>
    <a asp-action="Index" class="btn btn-secondary">↩ رجوع</a>
</form>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")

    <script>
        document.getElementById('examForm').addEventListener('submit', function (event) {
            const startTimeInput = document.getElementById('startTime').value;
            const endTimeInput = document.getElementById('endTime').value;

            // التحقق من وجود الوقتين وعدم تركهم فارغين
            if (!startTimeInput || !endTimeInput) {
                event.preventDefault();
                showError();
                return false;
            }

            const start = new Date(startTimeInput);
            const end = new Date(endTimeInput);

            if (end < start) {
                event.preventDefault();
                showError();
                return false;
            }

            function showError() {
                const errorMsg = document.getElementById('timeErrorMsg');
                errorMsg.classList.remove('d-none');

                setTimeout(() => {
                    errorMsg.classList.add('d-none');
                }, 6000);
            }
        });
    </script>
}
